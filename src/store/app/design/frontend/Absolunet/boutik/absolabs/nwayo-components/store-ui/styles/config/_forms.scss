//-------------------------------------
//-- Store UI - Config - Forms
//-------------------------------------

$storeui-form-required-color: $common-error-text-color;
$storeui-form-error-color:    $common-error-text-color;




// Add Recipient (abs-add-fields)
@mixin storeui-form-add-fields-styles {
	.fieldset {
		margin-bottom: 3em;

		.field:not(.choice) .control {
			width: 70%;
		}

		.actions-toolbar:not(:first-child) {
			@include nwayo-clearfix-styles();
			float: left;

			> .secondary .action.add {
				margin-top: 2em;
			}
		}

		.fields .actions-toolbar {
			margin: 0;
		}
	}

	.message.notice {
		margin: 2em 0 0;
	}

	.additional {
		position: relative;
		margin-top: 3.5em;
	}

	.action.remove {
		@include store-button-as-link-styles();
		position: absolute;
		top: 2em;
		left: .625em;
		width: auto;
		margin-left: 70%;
	}
}



// Add Recipient for desktop (abs-add-fields-desktop)
@mixin storeui-form-add-fields-large-styles {
	.fieldset {
		.field:not(.choice) .control {
			width: 50%;
		}

		.additional .action.remove {
			top: .375em;
			margin-left: 50%;
		}
	}
}

//-- Form input (lib-form-element-input-text)
@mixin storeui-form-input-text-styles {
	vertical-align: baseline;
	box-sizing: border-box;
	width: 100%;
	height: 2em;
	padding: 0 .5em;
	border: common-border($color:$form-input-border-color);
	border-radius: .05em;
	background: $form-input-bg-color;
	background-clip: padding-box;
	color: $form-input-text-color;
	font-family: $form-input-text-font;
	font-size: $form-input-text-size;
	line-height: $form-input-lineheight;

	&:disabled {
		opacity: .5;
	}

	// stylelint-disable selector-no-vendor-prefix, order/order
	&::placeholder {
		color: $form-input-placeholder-color;
	}

	&::-webkit-input-placeholder {
		color: $form-input-placeholder-color;
	}

	&:-ms-input-placeholder {
		color: $form-input-placeholder-color;
	}
	// stylelint-enable selector-no-vendor-prefix, order/order
}


//-- Actions toolbar (lib-form-field-type-revert)
@mixin storeui-form-field-revert-styles {
	margin: 0 0 1.25em;

	&:not(.choice) {
		> .label {
			float: none;
			box-sizing: content-box;
			width: auto;
			padding: 0;
			text-align: left;
		}

		> .control {
			float: none;
			width: auto;
		}
	}

	> .label {
		display: inline-block;
		margin: 0 0 .5em;
	}

	&.choice, &.no-label {
		&::before {
			display: none;
		}
	}
}














//-- Dropdown
@mixin storeui-dropdown-styles($selector) {
	#{$selector} {
		@include nwayo-list-reset-styles();
		position: absolute;
		top: 100%;
		z-index: 100;  // stylelint-disable-line scale-unlimited/declaration-strict-value, TODO: remplacer par common-zindex()
		display: none;
		box-sizing: border-box;
		min-width: 12.5em;
		border: common-border($color:$form-input-border-color);
		margin-top: .25em;
		box-shadow: 0 .2em .2em rgba($common-shadow-color, .15);
		background: $form-input-bg-color;

		&::before, &::after {
			content: '';
			position: absolute;
			display: block;
			width: 0;
			height: 0;
			border-bottom-style: solid;
		}

		&::before {
			top: -.75em;
			left: .6125em;
			z-index: 99;  // stylelint-disable-line scale-unlimited/declaration-strict-value, TODO: remplacer par common-zindex()
			border-width: .375em;
			border-style: solid;
			border-color: transparent transparent $form-input-bg-color;
		}

		&::after {
			top: -.875em;
			left: .5em;
			z-index: 98;  // stylelint-disable-line scale-unlimited/declaration-strict-value, TODO: remplacer par common-zindex()
			border-width: .5em;
			border-style: solid;
			border-color: transparent transparent $form-input-border-color;
		}

		li {
			padding: .3125em .3125em .3125em 1.5em;
			margin: 0;

			&:hover {
				background: $common-bg-var1-color;
				cursor: pointer;
			}
		}
	}

	&.active {
		overflow: visible;

		#{$selector} {
			display: block;
		}
	}
}


//-- Simple dropdown (lib-dropdown)
@mixin storeui-form-dropdown-styles($type) {
	@include nwayo-clearfix-styles();
	@include storeui-dropdown-styles('ul.dropdown');
	position: relative;
	display: inline-block;

	.action.toggle {
		display: inline-block;
		cursor: pointer;

		&::after {
			@include store-triangle-image(down);
			@include nwayo-pseudo-image-styles(1.375em);
			display: inline-block;
			overflow: hidden;
			vertical-align: middle;
			margin: 0 0 0 .3125em;
		}

		&.active {
			@include store-triangle-image(up);
		}
	}
}

//-- Split dropdown (lib-dropdown-split)
@mixin storeui-form-dropdown-split-styles {
	@include nwayo-clearfix-styles();
	position: relative;
	display: inline-block;

	.action.split {
		float: left;
		margin: 0;
	}

	button.action.split {
		border-top-right-radius: 0;
		border-bottom-right-radius: 0;
	}

	button + .action.toggle {
		border-left: 0;
		border-top-left-radius: 0;
		border-bottom-left-radius: 0;
	}

	.action.toggle {
		@include storeui-dropdown-styles('.items');
		float: right;
		margin: 0;

		&, &.active {
			display: inline-block;

			&::after {
				@include nwayo-pseudo-image-styles(1.375em);
				@include store-arrowhead-image(down);
				display: inline-block;
				overflow: hidden;
				vertical-align: top;
				margin: 0;
			}

			&:hover::after {
				@include store-arrowhead-image(down, hover);
			}

			> span {
				@include nwayo-visually-hidden-styles();
			}
		}
	}
}
